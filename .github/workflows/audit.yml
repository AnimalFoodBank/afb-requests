# This is a GitHub Actions workflow for running CI tests on a Django project.
# It is triggered on push or pull request events on the main branch, as well as
# manually using the workflow_dispatch event.
#
# The workflow runs on an Ubuntu 22.04 virtual machine with 2 parallel jobs and
# checks out the repository with a fetch depth of 1.  The build job sets the
# Python version to 3.11 and runs the tests using the specified matrix.
#
# The `django-test-action` action is used to run the tests and requires a
# requirements file and a settings directory path.
#
# The `pypa/gh-action-pip-audit` action is used to audit the requirements file
# for security vulnerabilities. It requires a requirements file and can be
# configured to require hashes for all packages.
#
# See:
# - https://github.com/pypa/gh-action-pip-audit
# - https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions


name: Audit (Both apps)
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    # https://stackoverflow.com/questions/58139175/running-actions-in-another-directory

    strategy:
      max-parallel: 2
      matrix:
        python-version: ["3.11"]

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #       install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      #----------------------------------------------
      #         install python deps (w/ cache)
      #----------------------------------------------
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction

      #----------------------------------------------
      #         install node & pnpm (w/ cache)
      #----------------------------------------------
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      #----------------------------------------------
      #         install javascript deps
      #----------------------------------------------
      - name: Install dependencies
        working-directory: apps/ui
        run: |
          npm install -g pnpm@9.1.1
          pnpm install

      #----------------------------------------------
      #         build & test
      #----------------------------------------------
      - name: Build Nuxt3 app
        working-directory: apps/ui
        env:
          NUXT_UI_PRO_LICENSE: ${{ secrets.NUXT_UI_PRO_LICENSE }}
        run: pnpm run build

      #----------------------------------------------
      #         lint  & test (disabled)
      #----------------------------------------------
      # - name: Run tests
      #   working-directory: apps/ui
      #   run: pnpm test


      #----------------------------------------------
      #         pnpm package audit
      #----------------------------------------------
      - name: Audit dependencies
        working-directory: apps/ui
        run: pnpm audit
