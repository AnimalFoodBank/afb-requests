
##
# Codium AI Config for Codiumate
#
# This .codiumai.toml file is a template for codiumAI
# configuration. Place it in the top directory for global use,
# or in a specific folder for local use.
#
# Based on https://docs.codium.ai/config/
#
# Config file precendence:
#
#   .codium.local.toml > .codium.toml
#
# In this example, the configuration for Module A will come
# from the local file first, followed by its .codium.toml
# file, and finally the global configuration. Module B will
# only use the global configuration.
#
#   /Project home
#   │   ├── /src
#   │   │   ├── /module A
#   │   │   │   ├── component_1
#   │   │   │   │   ├── .codium.local.toml
#   │   │   │   │   └── .codium.toml
#   │   │   │   │
#   │   │   │   └── component_2
#   │   │   │       └── .codium.toml
#   │   │   │
#   │   │   └── /module B
#   |   |
#   └── .codium.toml   # (AKA the "global" or "project" config)
#

[tests]

use_mocks = false
num_desired_tests = 3
is_add_test_to_suite = true

# A multiline string, delimited with triple-quotes (""")
# serving as an extra instruction that the AI model will
# consider. This will appear as "General instructions" in
# the configuration section in the tests panel.
# plan_instructions = """

# Possible values are:
#
#   Python: Pytest, Unittest
#
#   JS/TS: Jest, Mocha, Vitest, Karma, Jasmine, QUnit,
#          React Testing Library. For running tests with
#          Codium, only Jest, Mocha, Vitest, and React
#          Testing Library.
#
# framework = "Mocha"

# An additional Javascript utility library used to test
# your code, if any.
#
# Possible values are None, Testing Library, Enzyme, or
# Chai. Not applicable to Python projects.
#
# utility_library = "Chai"

# A hint to the test generator about whether to use mocks
# or not. Possible values are true or false.
#
# use_mocks = false

# How many tests should be generated by default. Fewer
# tests is faster. Does not apply at the moment to
# extend-suite tests.
#
# num_desired_tests = 2

# If you already have a test for this function/class you
# can put it here as a template. Here's an example:
#
# reference_test = """
#   describe("something", () => {
#     it("says 'bar'", () => {
#       const res = something.say();
#       expect(res).toBe("bar");
#     });
#   });
# """
