[tool.poetry]
name = "AFB Requests"
version = "0.1.0"
description = "The Animal Food Bank Requests application"
authors = ["Delano"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
Django = "5.0.6"
asgiref = "3.8.1"
asttokens = "2.4.1"
attrs = "23.2.0"
build = "1.2.1"
certifi = "2024.6.2"
cfgv = "3.4.0"
charset-normalizer = "3.3.2"
click = "8.1.7"
coverage = "7.5.3"
decorator = "5.1.1"
distlib = "0.3.8"
django-cors-headers = "4.3.1"
django-extensions = "3.2.3"
django-filter = "24.2"
django-model-utils = "4.4.0"
django-phonenumber-field = "7.3.0"
django-unfold = "0.26.0"
django-vite = "3.0.4"
drf-spectacular = "0.27.2"
drf-spectacular-sidecar = "2024.6.1"
executing = "2.0.1"
filelock = "3.13.1"
identify = "2.5.35"
idna = "3.7"
inflection = "0.5.1"
iniconfig = "2.0.0"
ipdb = "0.13.13"
ipython = "8.24.0"
jedi = "0.19.1"
jsonschema = "4.22.0"
jsonschema-specifications = "2023.12.1"
markdown = "3.6"
markupsafe = "2.1.5"
matplotlib-inline = "0.1.6"
nodeenv = "1.9.0"
packaging = "24.0"
parso = "0.8.3"
pexpect = "4.9.0"
phonenumbers = "8.13.32"
pip-tools = "7.4.1"
platformdirs = "4.2.0"
pluggy = "1.4.0"
pre-commit = "3.7.1"
prompt-toolkit = "3.0.43"
ptyprocess = "0.7.0"
pure-eval = "0.2.2"
pygments = "2.17.2"
pyproject-hooks = "1.0.0"
pytest = "8.1.1"
pytest-django = "4.8.0"
python-dotenv = "1.0.1"
pyyaml = "6.0.1"
referencing = "0.35.1"
requests = "2.32.3"
rpds-py = "0.18.1"
six = "1.16.0"
sqlparse = "0.5.0"
stack-data = "0.6.3"
traitlets = "5.14.2"
uritemplate = "4.1.1"
urllib3 = "2.2.1"
virtualenv = "20.26.2"
wcwidth = "0.2.13"
werkzeug = "3.0.3"
wheel = "0.43.0"
djangorestframework = {git = "https://github.com/delano/django-rest-framework.git", rev = "dev"}
drfpasswordless = {git = "https://github.com/delano/django-rest-framework-passwordless.git", rev = "dev"}
rich = "^13.7.1"
pytest-xdist = "^3.6.1"
django-log-request-id = "^2.1.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 80
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.nuxt
  | \.pytest_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "__pycache__",
]

# Same as Black.
line-length = 80
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.isort]
force_sort_within_sections = true
force_single_line = false
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 80


[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "afb.settings"
pythonpath = [
  ".",
  "./apps/api",
]
minversion = "8.1"

# https://docs.pytest.org/en/8.1.x/reference/reference.html#command-line-flags
addopts = "-rfe -q"

required_plugins = "pytest-django>=4.8.0 pytest-xdist>=3.6.0"

python_files = [
  "test_*.py",
  "*_test.py",
]
testpaths = [
    "apps/api/tests",
    "apps/api/afbcore/tests",
]
