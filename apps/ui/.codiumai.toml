
##
# Codium AI Config for Nuxt3 UI app
#
# See global project config for more details on how this file
# is configured.


[tests]

# plan_instructions = """

framework = "Jasmine"

# utility_library = "Chai"

use_mocks = false

num_desired_tests = 2

# reference_test = """
#   describe("something", () => {
#     it("says 'bar'", () => {
#       const res = something.say();
#       expect(res).toBe("bar");
#     });
#   });
# """


[tests.javascript]

# When running Javascript / Typescript tests, use this directory as the
# test process "current working directory".
# This is a path relative to the location of the config file.
# Default: The directory containing the config file.
# Note: the typical setup is to place the config file in the same
# directory as the relevant 'package.json' file, and leave this
# commented-out.
# overrideTestRunCwd = "./test"

# This is the command that's used to run tests.
# PLEASE READ CAREFULLY:
##
# When running tests, CodiumAI generates a temporary file that contains
# the test code for a single test, and runs that file.
# When the tests are done, the temporary file is deleted.
# For component-oriented tests (when you click "test this class" or
# "test this function"), the temporary file is created next to the file
# being tested.
# For extend-suite tests (when you click "add more tests" on a test-suite),
# the temporary file is created next to the test-suite file.
##
# Typically, you're going to want to take the test script defined in your
# package.json file, and tweak it a little to make it compatible with
# CodiumAI.
##
# You almost always want to start with 'npx' (e.g. 'npx jest', not 'npm jest'
# or 'yarn test').
##
# Note that the test command must be able to run test files that are located
# in the same directory as the file under test.
# A common issue is that the test command in the package.json file selects
# only from a "tests" directory, causing the CodiumAI tests be "not found" -
# please remove any such restriction from the command / configuration.
##
# The placeholder TEST_FILEPATH will be replaced with the actual test file
# path - this is how we find the file to run.
##
# EXAMPLES:
# Mocha:
#    npx ts-mocha TEST_FILEPATH --require ./test/mocha/setup.ts
# Jest:
#    npx jest --runTestsByPath TEST_FILEPATH
##
# DEBUGGING NOTE:
# To help debug run-tests issues, you can view run logs in vscode's OUTPUT
# (select codium-ai from the dropdown).
# It's helpful to clear the output (right-click -> clear) and then run the
# tests again.
##
# overrideTestRunScript = "npx jest --runTestsByPath TEST_FILEPATH"

# A multiline string, delimited with triple-quotes ("""),
# containing import declaration to use in each test file.
# overrideImports = """
# import {expect} from 'chai'; """
