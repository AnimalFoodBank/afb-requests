##
# Requirements file for afb-requests.
#
# NOTE: DO NOT EDIT requirements.txt DIRECTLY. Edit this file
# instead, and use the pip-compile command to generate it.
#
#
# USAGE
#
# After modifying this file to include the packages you
# want to install for this project, run the following to
# generate the requirements.txt file:
#
#   $ pip-compile --output-file requirements.txt --upgrade --strip-extras requirements.in
#
# Using other flags:
#
#     `--upgrade` to upgrade all packages to their latest versions.
#     `--skip-extras` to skip installing optional dependencies.
#     `--generate-hashes` to generate hashes for all packages.
#
# Install dependencies as you normally would:
#
#   $ pip install -r requirements.txt
#
#
# MORE INFO
#
# https://github.com/jazzband/pip-tools
#
# To resolve warnings in Django (important to do before upgrading):
#
#   $ python -Wa manage.py test
#
# See: https://docs.djangoproject.com/en/4.2/howto/upgrade-version/#upgrade-packages-individually
#


# Django 5.0: Enhanced features and improvements.
#
# ASGI Support: Django 5.0 prioritizes asynchronous servers, eliminating
# bundled WSGI support for streamlined async deployments.
#
# Model Mixins: The new TimeStampedModel and UUIDModel mixins in Django 5.0
# automatically populate timestamp fields and UUID primary keys, replacing
# the need for django-model-utils.
#
# Serialization: Django 5.0 introduces APIs for serializing to streams/files
# and deserializing from strings, enhancing data interchange capabilities.
#
#
# Django 4.0: new features and improvements.
#
# ASGI Support: Django 4.0 has built-in support for ASGI
# (Asynchronous Server Gateway Interface), which allows for
# greater concurrency and is the standard interface between
# async Python web servers, applications, and frameworks.
#
# Middleware as Coroutine: Django 4.0 allows middleware to be
# defined as a coroutine. This is part of Django's ongoing
# efforts to add more asynchronous support.
#
# Automatic AppConfig Discovery: Django 4.0 can automatically
# discover and set up AppConfigs, simplifying the process of
# configuring apps.
#
# New URL Pattern Syntax: Django 4.0 introduces a new, simpler
# syntax for URL patterns, using Python's type hinting.
#
Django~=4.2

# A collection of custom extensions for the Django
# Framework. These include management commands,
# additional database fields, admin extensions and
# much more. Django Extensions is a great time saver
# for common tasks.
django_extensions

# Includes features like Choices, TimeStampedModel, and others. You
# can find more information in the official docs:
# https://django-model-utils.readthedocs.io/en/latest/
django-model-utils

# Ties in with the build manager for the frontend
django-vite

# Dynamic query filtering
django-filter

# Upgraded admin experience
django-unfold

django-phonenumber-field[phonenumbers]

# DRF dependencies
# See: https://www.django-rest-framework.org/#installation

# Django REST framework
# Remote
#-e git+ssh://git@github.com/delano/django-rest-framework.git@main#egg=djangorestframework
#
# Local
-e git+file:///Users/d/Projects/opensource/django-rest-framework@dev#egg=djangorestframework

# DRF Registration package installed via git
# Remote
#-e git+ssh://git@github.com/delano/drf-registration.git@b6b50ef151473385b2fdc1b3800773545d689e3c#egg=drf-registration
#
# Local
-e git+file:///Users/d/Projects/opensource/drf-registration@dev#egg=drf-registration

# DRFPasswordless package installed via git
# Remote
# -e git+ssh://git@github.com/delano/django-rest-framework-passwordless.git@delano/20240209-email-context#egg=drfpasswordless
#
# Local
-e git+file:///Users/d/Projects/opensource/django-rest-framework-passwordless@dev#egg=drfpasswordless

# This is used for the API docs
markdown

# Probably not needed, now that we have django-vite
# django-tailwind[reload]
# django-crispy-forms
# crispy-tailwind
# pillow

# Dev dependencies
pre-commit
pip-tools
pytest
pytest-django
coverage
ipdb
Werkzeug  # Required for ipdb`

# For the postgres database (default is SQLite)
psycopg2-binary
