"""
Django settings for afb project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import logging
import os
from pathlib import Path

import sqlparse
from corsheaders.defaults import default_headers
from dotenv import load_dotenv

# After loading dotenv, you can use os.getenv() to access
# environment variables. e.g. `os.getenv("DEBUG", "False")`
load_dotenv()

TEST_RUNNER = "afb.test_runner.PytestTestRunner"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

BASE_HOST = os.getenv("BASE_HOST", "localhost")
URI_SCHEMA = os.getenv("URI_SCHEMA", "https")
BASE_URI = f"{URI_SCHEMA}://{BASE_HOST}"

STAGING_HOST = os.getenv("STAGING_HOST", "example.com")
STAGING_URI = f"{URI_SCHEMA}://{STAGING_HOST}"

PRODUCTION_HOST = os.getenv("PRODUCTION_HOST", "example.com")
PRODUCTION_URI = f"{URI_SCHEMA}://{PRODUCTION_HOST}"

UI_BASE_HOST = os.getenv("UI_BASE_HOST", "localhost")
UI_URI_SCHEMA = os.getenv("UI_URI_SCHEMA", "https")
UI_BASE_URI = f"{URI_SCHEMA}://{UI_BASE_HOST}"

# When using Django Rest Framework (DRF), you typically don't use
# LOGIN_REDIRECT_URL because DRF is designed to build APIs, which are
# generally stateless. This means after a successful login, instead of
# redirecting to a new page, you would return a response (often with a token
# for authentication).
#
# However, if you're building a browsable API with DRF and want to redirect
# after login, you can set LOGIN_REDIRECT_URL to any valid URL endpoint in
# your Django project. This could be a DRF view that returns JSON data, or a
# Django view that returns HTML.
LOGIN_REDIRECT_URL = os.getenv("LOGIN_REDIRECT_URL", "/foobar")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"
IN_PRODUCTION = not DEBUG

USE_X_FORWARDED_HOST = True

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


ALLOWED_HOSTS = [
    "127.0.0.1",
    "127.0.0.1:8000",
    "127.0.0.1:3000",
    "localhost",
    "dev.afb.pet",
    "staging.afb.pet",
    "dev.animalfoodbank.org",
]

INSTALLED_APPS = [
    "unfold",  # https://github.com/unfoldadmin/django-unfold
    "django.contrib.sites",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "django_extensions",  # add this for 'python manage.py runserver_plus'
    "rest_framework",  # add DRF
    "rest_framework.authtoken",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "drfpasswordless",
    "django_filters",  # add DRF filters
    "phonenumber_field",
    "afbcore",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "log_request_id.middleware.RequestIDMiddleware",
    # "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # 'afbcore.middleware.DebugCorsMiddleware',
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# https://github.com/adamchainz/django-cors-headers
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-csrftoken",
    "afb",
]


# https://github.com/adamchainz/django-cors-headers#cors_allow_credentials
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:3000",  # Nitro dev server
    "http://127.0.0.1:8000",  # Django dev server
    # TODO: Add production URL(s)
    "https://localhost",
    "https://dev.afb.pet",
    "https://staging.afb.pet",
]
CORS_ORIGIN_WHITELIST = CORS_ALLOWED_ORIGINS

# Resolves CSRF error:
#   Forbidden (Origin checking failed - http://127.0.0.1:3000 does not match any trusted origins.):
#
# See:
#   https://david.dev/django-origin-checking-failed-does-not-match-any-trusted-origins
#   https://github.com/adamchainz/django-cors-headers
#
CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:3000",  # Nitro dev server
    "http://127.0.0.1:3001",  # Nitro dev server (alt)
    "http://127.0.0.1:8000",  # Django dev server
    "https://localhost",
    "https://dev.afb.pet",
    "https://staging.afb.pet",
]

CSRF_USE_SESSIONS = False


CSRF_COOKIE_SECURE = IN_PRODUCTION
SESSION_COOKIE_SECURE = IN_PRODUCTION
SECURE_SSL_REDIRECT = False  # The reverse proxy handles this.

# This is needed for CSRF to work with CORS:
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-samesite
CSRF_COOKIE_SAMESITE = "Strict"  # Or "Lax" or None

# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = False

# # May need to revisit this for production:
# https://docs.djangoproject.com/en/4.2/ref/csrf/#how-it-works
# CSRF_COOKIE_DOMAIN = ""

TOKEN_EXPIRED_AFTER_WEEKS = 2


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-STATIC_ROOT
# https://docs.djangoproject.com/en/4.2/howto/static-files/#deployment
# This should be an initially empty destination directory. It's populated with
# the result of collectstatic during the deployment process. You should use
# the collectstatic management command to collect your static files in that
# directory. Then, your web server can serve the files in STATIC_ROOT.
#
# Add paths to STATICFILES_DIRS to include other directories and run:
#
#  $ python manage.py collectstatic
#
STATIC_ROOT = "/var/www/public/static"

# For prod:
# https://docs.djangoproject.com/en/4.2/howto/static-files/deployment/#staticfiles-from-cdn
# https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-STORAGES
#
# This is ignored when using a CDN or reverse proxy for serving static files.
STATIC_URL = "static/"

# Directories containing the static files. The contents are collected
# into STATIC_ROOT using the collectstatic management command.
#
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        # "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
        # 'rest_framework.permissions.AllowAny',
        "rest_framework.permissions.IsAuthenticated",
    ],
    # Rate limiting / resource throttling
    #
    # See: https://www.django-rest-framework.org/api-guide/throttling/#how-clients-are-identified
    #
    "DEFAULT_THROTTLE_CLASSES": [
        # "rest_framework.throttling.AnonRateThrottle",
        # "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        # "anon": "100/min",
        # "user": "1000/day",
        "signups": "60/hour",  # per IP Address (e.g. think library)
    },
    "NUM_PROXIES": 1,  # https://github.com/encode/django-rest-framework/issues/3234#issuecomment-128664927
    # Pagination
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 25,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend"
    ],
    # API Version
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "ALLOWED_VERSIONS": ["v1"],
    "DEFAULT_VERSION": "v1",
    "VERSION_PARAM": "version",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        # 'rest_framework.renderers.BrowsableAPIRenderer',  # DRF's default HTML docs
    ],
}

# @see https://drf-spectacular.readthedocs.io/en/latest/settings.html
SPECTACULAR_SETTINGS = {
    "TITLE": "AFB Requests API",
    "DESCRIPTION": "API for managing food requests at the Animal Food Bank.",
    "VERSION": "1.0.0",
    # https://drf-spectacular.readthedocs.io/en/latest/client_generation.html
    "COMPONENT_SPLIT_REQUEST": True,
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "SERVERS": [
        {"url": f"{BASE_URI}/", "description": "Dev Host"},
        {"url": f"{STAGING_URI}/", "description": "Staging Host"},
        {"url": f"{PRODUCTION_URI}/", "description": "Production Host"},
    ],
}

# drfpasswordless
#
# For the default settings see:
# https://github.com/aaronn/django-rest-framework-passwordless
#
# Test commands:
# curl -X POST -d "email=delbo@solutious.com" localhost:8000/auth/email/
# curl -X POST -d "email=delbo@solutious.com&token=858997" localhost:8000/auth/token/
PASSWORDLESS_AUTH = {
    "PASSWORDLESS_BASE_URI": UI_BASE_URI,
    "PASSWORDLESS_AUTH_TYPES": ["EMAIL"],  # and/or 'MOBILE'
    "PASSWORDLESS_EMAIL_NOREPLY_ADDRESS": "noreply@animalfoodbank.org",  # or None
    "PASSWORDLESS_EMAIL_SUBJECT": "Continue signing in",
    "PASSWORDLESS_EMAIL_PLAINTEXT_TEMPLATE_NAME": "onboarding/passwordless_token_email.txt",
    "PASSWORDLESS_EMAIL_TOKEN_HTML_TEMPLATE_NAME": "onboarding/passwordless_token_email.html",
    "PASSWORDLESS_EMAIL_VERIFICATION_PLAINTEXT_TEMPLATE_NAME": "onboarding/passwordless_verification_email.txt",
    "PASSWORDLESS_EMAIL_VERIFICATION_TOKEN_HTML_TEMPLATE_NAME": "onboarding/passwordless_verification_email.html",
    # Registers previously unseen aliases as new users.
    "PASSWORDLESS_REGISTER_NEW_USERS": False,
    # URL Prefix for Authentication Endpoints
    "PASSWORDLESS_AUTH_PREFIX": "auth/",
    # URL Prefix for Verification Endpoints
    "PASSWORDLESS_VERIFY_PREFIX": "auth/verify/",
    # Amount of time that tokens last, in seconds
    "PASSWORDLESS_TOKEN_EXPIRE_TIME": 15 * 60,  # 15 min
    # The user's email field name
    "PASSWORDLESS_USER_EMAIL_FIELD_NAME": "email",
    # Marks itself as verified the first time a user completes auth via token.
    # Automatically unmarks itself if email is changed. Use /auth/verify/email
    # for the address and /auth/verify for the token.
    "PASSWORDLESS_USER_MARK_EMAIL_VERIFIED": False,
    "PASSWORDLESS_USER_EMAIL_VERIFIED_FIELD_NAME": "email_verified",
    # Automatically send verification email or sms when a user changes their alias.
    "PASSWORDLESS_AUTO_SEND_VERIFICATION_TOKEN": False,
    # What function is called to construct an authentication tokens when
    # exchanging a passwordless token for a real user auth token. This function
    # should take a user and return a tuple of two values. The first value is
    # the token itself, the second is a boolean value representating whether
    # the token was newly created.
    "PASSWORDLESS_AUTH_TOKEN_CREATOR": "drfpasswordless.utils.create_authentication_token",
    # What function is called to construct a serializer for drf tokens when
    # exchanging a passwordless token for a real user auth token.
    "PASSWORDLESS_AUTH_TOKEN_SERIALIZER": "drfpasswordless.serializers.TokenResponseSerializer",
    # A dictionary of demo user's primary key mapped to their static pin
    "PASSWORDLESS_DEMO_USERS": {},
    # Configurable function for sending email
    "PASSWORDLESS_EMAIL_CALLBACK": "drfpasswordless.utils.send_email_with_callback_token",
    # Token Generation Retry Count
    "PASSWORDLESS_TOKEN_GENERATION_ATTEMPTS": 3,
}

PHONENUMBER_DB_FORMAT = "INTERNATIONAL"
PHONENUMBER_DEFAULT_FORMAT = "E164"
PHONENUMBER_DEFAULT_REGION = "CA"

ROOT_URLCONF = "afb.urls"

AUTH_USER_MODEL = "afbcore.User"

INTERNAL_IPS = [
    # Add local IP addresses here for tailwind to work, then run:
    # * (Dev) `python manage.py tailwind install`
    # * (Production) `python manage.py tailwind build`
    "127.0.0.1",
]

# Templates
# https://docs.djangoproject.com/en/4.2/ref/settings/#templates

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "afb.wsgi.application"


# Sending Email
# https://docs.djangoproject.com/en/5.0/ref/settings/#email-backend
# https://docs.djangoproject.com/en/5.0/topics/email/
#
# For development, you can use the console backend:
# 'django.core.mail.backends.console.EmailBackend'
#
#   OR
#
# Run an instance of Mailpit (https://github.com/axllent/mailpit) and use the
# SMTP backend:
# 'django.core.mail.backends.smtp.EmailBackend'
#
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_TIMEOUT = int(os.getenv("EMAIL_TIMEOUT", 5))

EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")

EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only
# one of these settings should appear in your .env file.
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", False)
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", False)


if DEBUG:
    INSTALLED_APPS += [
        "django.contrib.admindocs",
        "debug_toolbar",
    ]

    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE"),
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOG_LEVEL = "DEBUG" if DEBUG else "INFO"

REQUEST_ID_RESPONSE_HEADER = "REQID"


class QueryFormatter(logging.Formatter):
    def format(self, record):
        record.prettysql = ""
        try:
            _, rawsql, *_ = record.args
        except ValueError:
            print("record.args does not contain enough values to unpack")
        else:
            record.prettysql = sqlparse.format(rawsql, reindent=True)

        # Call the original formatter class to do the actual formatting
        return super().format(record)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s [%(request_id)s] %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
        "sql": {
            "()": QueryFormatter,
            "format": "%(levelname)s [%(request_id)s] [SQL: %(name)s'] \n %(prettysql)s",
        },
    },
    "filters": {
        "request_id": {"()": "log_request_id.filters.RequestIDFilter"},
    },
    "handlers": {
        "console": {
            "level": LOG_LEVEL,
            # "class": "rich.logging.RichHandler",  # see afbcore/apps.py
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "filters": ["request_id"],
        },
        "console_db": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "sql",
            "filters": ["request_id"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["console_db"],
            "level": "DEBUG",  # Set to DEBUG to capture all SQL queries
            "propagate": False,
        },
    },
    "root": {"level": LOG_LEVEL, "handlers": ["console"]},
}
