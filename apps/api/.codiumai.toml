
##
# Codium AI Config for Nuxt3 UI app
#
# See global project config for more details on how this file
# is configured.
#

# Checkout Output panel for "codium-ai", filter for "config". It finds the
# apps/api/.codiumai.toml and the top-level .codiumai.toml files. But
# following right after that for "http request sent", shows the
# configuration as empty/defaults. This is because the config is
# not being read from the file. It is being read from the
# "codium-ai" section of the pyproject.toml file. This is the
#

#    ["DEBUG" - 11:21:12 AM] http request sent
#    {
#    "requestId": "1a7a8cc5-468d-449d-84b4-fd14e1a4a7c3:03701675-c268-4fb8-bf34-692031dd5b98",
#    "action": "generateTests",
#    "panelId": "/Users/d/Projects/clients/afb/afb-requests/apps/api/afbcore/views/__init__.py_FoodRequestViewSet_1a7a8cc5-468d-449d-84b4-fd14e1a4a7c3",
#    "previousRequestId": "1a7a8cc5-468d-449d-84b4-fd14e1a4a7c3",
#    "configuration": {
#        "reference_test": "",
#        "plan_instructions": "",
#        "num_desired_tests": 2,
#        "is_add_test_to_suite": false
#    },
#    "regenerate_tests": false,
#    "generate_suggestions": false,
#    "should_return_context": false
#    }
#

[tests]

# plan_instructions = """

use_mocks = false
num_desired_tests = 2
is_add_test_to_suite = true

framework = "pytest"

reference_test = """
# 2024-06-03
from afbcore.serializers import UserSerializer
from django.contrib.auth import get_user_model
from django.contrib.auth.hashers import check_password
from rest_framework import status
from rest_framework.test import APITestCase

class TestCase(APITestCase):
    @classmethod
    def setUpTestData(cls):
        cls.User = get_user_model()
        cls.valid_password = "xyz9.helloPLEASE"

    def test_register_user_serializer_valid_data(self):
        password_str = TestCase.valid_password
        data = {
            "name": "testuser",
            "email": "testuser@example.com",
        }

        serializer = UserSerializer(data=data)
        is_valid = serializer.is_valid()

        if not is_valid:
            print(serializer.errors)

        self.assertNotIn("email", serializer.errors)
        self.assertNotIn("name", serializer.errors)
        self.assertNotIn("password", serializer.errors)
        self.assertNotIn("password2", serializer.errors)
        self.assertTrue(is_valid)

        user = serializer.save()
        self.assertEqual(user.name, data["name"])
        self.assertEqual(user.email, data["email"])

    def test_register_user_serializer_invalid_email(self):
        data = {
            "name": "testuser",
            "email": "invalid_email",
        }

        serializer = UserSerializer(data=data)
        self.assertFalse(serializer.is_valid())
        self.assertIn("email", serializer.errors)

    def test_register_user_serializer_password_ignored(self):
        password_str = TestCase.valid_password
        data = {
            "name": "testuser",
            "email": "testuser@example.com",
            "password": password_str,
            "password2": "password456",
        }

        serializer = UserSerializer(data=data)
        self.assertTrue(serializer.is_valid())
        user = serializer.save()

        # The given passwork doesn't match the literal value of
        # the field and doesn't match the hashed value either.
        self.assertFalse(user.password is None)
        self.assertNotEqual(user.password, password_str)
        self.assertFalse(check_password(password_str, user.password))

        self.assertTrue(len(serializer.errors) == 0)

"""


[tests.javascript]
