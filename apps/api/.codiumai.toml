
##
# Codium AI Config for Nuxt3 UI app
#
# See global project config for more details on how this file
# is configured.
#

# Checkout Output panel for "codium-ai", filter for "config". It finds the
# apps/api/.codiumai.toml and the top-level .codiumai.toml files. But
# following right after that for "http request sent", shows the
# configuration as empty/defaults. This is because the config is
# not being read from the file. It is being read from the
# "codium-ai" section of the pyproject.toml file. This is the
#

#    ["DEBUG" - 11:21:12 AM] http request sent
#    {
#    "requestId": "1a7a8cc5-468d-449d-84b4-fd14e1a4a7c3:03701675-c268-4fb8-bf34-692031dd5b98",
#    "action": "generateTests",
#    "panelId": "/Users/d/Projects/clients/afb/afb-requests/apps/api/afbcore/views/__init__.py_RequestViewSet_1a7a8cc5-468d-449d-84b4-fd14e1a4a7c3",
#    "previousRequestId": "1a7a8cc5-468d-449d-84b4-fd14e1a4a7c3",
#    "configuration": {
#        "reference_test": "",
#        "plan_instructions": "",
#        "num_desired_tests": 2,
#        "is_add_test_to_suite": false
#    },
#    "regenerate_tests": false,
#    "generate_suggestions": false,
#    "should_return_context": false
#    }
#

[tests]

# plan_instructions = """

framework = "Pytest"

reference_test = """

from django.test import TestCase
from rest_framework import status
from rest_framework.test import APIRequestFactory
from rest_framework.test import force_authenticate
from afbcore.views import RequestViewSet
from afbcore.models import Request
from afbcore.serializers import RequestSerializer
from django.contrib.auth import get_user_model

User = get_user_model()


class RequestViewSetTestCase(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.user = User.objects.create(
            email="testuser@example.com", password="testpassword"
        )
        cls.request = Request.objects.create(
            title="Test Request", description="Test Description", user=cls.user
        )

    def setUp(self):
        self.factory = APIRequestFactory()
        self.view = RequestViewSet.as_view(
            {
                "get": "list",
                "post": "create",
                "get": "retrieve",
                "put": "update",
                "patch": "partial_update",
            }
        )
        self.url = "/requests/"

    def test_list_requests(self):
        request = self.factory.get(self.url)
        force_authenticate(request, user=self.user)
        response = self.view(request)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
"""


[tests.python]
