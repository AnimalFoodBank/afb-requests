##
# Caddy configuration file for Animal Food Bank
#
# To run Caddy with the following Caddyfile, use the following command:
#
#   $ caddy run --config ./etc/caddy/Caddyfile
#
# Reload the Caddyfile without restarting Caddy:
#   $ caddy reload --config ./etc/caddy/Caddyfile
#
# Automatically reload the Caddyfile when it changes:
#   $ caddy run --config ./etc/caddy/Caddyfile --watch
#
# Automatically reformats the Caddyfile after saving:
#   $ caddy fmt --overwrite ./etc/caddy/Caddyfile

# About the certs
#
# The certs are generated using the following command:
#   $ mkcert localhost 127.0.0.1 ::1 dev.animalfoodbank.org
#   $ mkcert -install
#
# And stored in the following directory: etc/caddy/.certs. The directory is created
# manually and the certs are moved into it.
#
# For curl to work with the certs, the following environment variable needs to be set:
#   $ export CURL_CA_BUNDLE="/Users/d/Library/Application Support/mkcert/rootCA.pem"
#
# See: https://curl.se/docs/sslcerts.html
#
# For node to work with the certs, the following environment variable needs to be set:
#   $ export NODE_EXTRA_CA_CERTS="/Users/d/Library/Application Support/mkcert/rootCA.pem"

{
  # TODO: The email address to use for ACME (Let's Encrypt) contacts
  # email "delano@animalfoodbank.org"
}

{
  # TODO: Disable this in production
  #debug
}

:80 {
    log {
        output stdout
    }
    # Leave as the .org address for now. Lower risk of accidentally
    # exposing the .pet domain unnecessarily.
    redir https://dev.animalfoodbank.org{uri}
}

https://dev.afb.pet https://dev.animalfoodbank.org, https://localhost {
	tls etc/caddy/.certs/dev.afb.pet+2.pem etc/caddy/.certs/dev.afb.pet+2-key.pem
  header Permissions-Policy "geolocation=(), microphone=()"

  log {
    output stdout
  }

  # header Content-Security-Policy "default-src 'self'; connect-src 'self' ws://localhost:4000 dev.afb.pet dev.animalfoodbank.org localhost; script-src 'self'; style-src 'self'; img-src 'self' data:; font-src 'self';"

  # header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';"

  # header Content-Security-Policy "default-src 'self' dev.afb.pet dev.animalfoodbank.org localhost; connect-src 'self' ws://localhost:4000 dev.afb.pet dev.animalfoodbank.org localhost; script-src 'self' 'unsafe-inline' dev.afb.pet dev.animalfoodbank.org localhost; style-src 'self' 'unsafe-inline' dev.afb.pet dev.animalfoodbank.org localhost; img-src 'self' data: dev.afb.pet dev.animalfoodbank.org localhost; font-src 'self' dev.afb.pet dev.animalfoodbank.org localhost;"

  # header X-Frame-Options "SAMEORIGIN"
  # header X-Content-Type-Options "nosniff"
  # header Referrer-Policy "same-origin"

  # TODO: Re-enable this in production. It's disabled for development bc
  # it's difficult to work around if there are any cert issues (browsers cache
  # the HSTS policy and it's difficult to clear).
  #
  # header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

  # Static files are served from the public directory. Django is
  # responsible for collecting static files into `public/static`. The
  # Django setting is `STATIC_ROOT = "path" / "2" / "public" / "static"`
  # and the command is simply `python manage.py collectstatic`.
  #
  # NOTE: The Django command needs to be run after every change
  # any of the static files.
  #
	handle /static/* {
		root * ./public
		file_server
	}
  root * ./public

	handle {
		reverse_proxy /api* 127.0.0.1:8000 {
      header_down Server "Proxied Server Name (django api)"
    }
    reverse_proxy /admin* 127.0.0.1:8000 {
      header_down Server "Proxied Server Name (django admin)"
    }
    reverse_proxy 127.0.0.1:3000 {
      header_down Server "Proxied Server Name (vue)"
    }
	}

  # TODO: Revisit websockets config in Caddy.
  # TODO: How to tell Nuxt/Vue to use wss:// instead of ws://? Also the hostname. 127.0.0.1:4000 is not going to work in production.
  handle {
      reverse_proxy /ws/* http://127.0.0.1:4000 {
          header_up Upgrade {http.upgrade}
          header_up Connection {http.connection}
          header_down Server "Proxied Server Name (websocket)"
          header_down Upgrade {upstream.upgrade}
      }
  }

}
