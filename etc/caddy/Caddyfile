##
# Caddy configuration file for Animal Food Bank
#
# To run Caddy with the following Caddyfile, use the following command:
#
#   $ caddy run --config ./etc/caddy/Caddyfile
#
# Reload the Caddyfile without restarting Caddy:
#   $ caddy reload --config ./etc/caddy/Caddyfile
#
# Automatically reload the Caddyfile when it changes:
#   $ caddy run --config ./etc/caddy/Caddyfile --watch
#
# Automatically reformats the Caddyfile after saving:
#   $ caddy fmt --overwrite ./etc/caddy/Caddyfile

# About the certs
#
# The certs are generated using the following command:
#   $ mkcert localhost 127.0.0.1 ::1 dev.animalfoodbank.org
#   $ mkcert -install
#
# And stored in the following directory: etc/caddy/.certs. The directory is created
# manually and the certs are moved into it.
#
# For curl to work with the certs, the following environment variable needs to be set:
#   $ export CURL_CA_BUNDLE="/Users/d/Library/Application Support/mkcert/rootCA.pem"
#
# See: https://curl.se/docs/sslcerts.html
#
# For node to work with the certs, the following environment variable needs to be set:
#   $ export NODE_EXTRA_CA_CERTS="/Users/d/Library/Application Support/mkcert/rootCA.pem"

{
  # TODO: Create alias email address to use for ACME (Let's Encrypt) contacts
  email "delano@animalfoodbank.org"
}

https://staging.afb.pet {
# https://dev.afb.pet https://localhost {
  # tls etc/caddy/.certs/dev.afb.pet+2.pem etc/caddy/.certs/dev.afb.pet+2-key.pem
  header Permissions-Policy ""


  log {
    output stdout
  }

  # header Content-Security-Policy "default-src 'self'; connect-src 'self' staging.afb.pet staging.animalfoodbank.org; script-src 'self'; style-src 'self'; img-src 'self' data:; font-src 'self';"

  # header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';"

  # header Content-Security-Policy "default-src 'self' staging.afb.pet staging.animalfoodbank.org; connect-src 'self' staging.afb.pet staging.animalfoodbank.org; script-src 'self' 'unsafe-inline' staging.afb.pet staging.animalfoodbank.org; style-src 'self' 'unsafe-inline' staging.afb.pet staging.animalfoodbank.org; img-src 'self' data: staging.afb.pet staging.animalfoodbank.org; font-src 'self' staging.afb.pet staging.animalfoodbank.org;"

  header X-Frame-Options "SAMEORIGIN"
  header X-Content-Type-Options "nosniff"
  header Referrer-Policy "same-origin"

  # Leave strict transport security enabled in staging & production. Disable
  # for development bc it's difficult to work around if there are any cert
  # issues (browsers cache the HSTS policy and it's difficult to clear).
  #
  #header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

  # Static files are served from the public directory. Django is
  # responsible for collecting static files into `public/static`. The
  # Django setting is `STATIC_ROOT = "path" / "2" / "public" / "static"`
  # and the command is simply `python manage.py collectstatic`.
  #
  # NOTE: The Django command needs to be run after every change
  # any of the static files.
  #
  root * /var/www/public

  handle /api/* {
    # The backend API powered by Django. The exact settings here
    # depend on how we choose to run the Django app in production.
    # For example, we may choose to run it in a separate process
    # using something like gunicorn.
    reverse_proxy 127.0.0.1:8000 {
      header_down Server "Proxied Server Name (django api)"
    }
  }

  # Using a unique path helps prevent scripts et al from detecting
  # a Django install and trying to exploit it.
  handle /afbadmin/* {
    # The Django admin is served from the same server as the API
    # which we'll revisit in the future so similar reasons.
    reverse_proxy 127.0.0.1:8000 {
      header_down Server "Proxied Server Name (django admin)"
    }
  }

  # Enable only one of the following two blocks at a time. The first
  # block is for serving the Nuxt app in development mode. The second
  # block is for serving the Nuxt app as prebuilt, static files.
  handle {
    # reverse_proxy 127.0.0.1:3000 {
    #   header_down Server "Proxied Server Name (vue)"
    # }

    root * /var/www/public
    file_server
  }

  # NOTE: Server-side components of a Nuxt app use websockets. Our
  # application is client-side only so we don't need to worry about
  # configuring websockets here.
}
